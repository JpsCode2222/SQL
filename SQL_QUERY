# CREATE DATABASE
CREATE DATABASE database_name;

# IF NOT EXISTS IN CREATE DATABASE
CREATE DATABASE IF NOT EXISTS database_name;

# DELETE DATABASE
DROP DATABASE database_name;

# IF EXISTS IN DELETE DATABASE
DROP DATABASE IF EXISTS database_name;

# USE DATABASE
USE database_name;

# CREATE TABLE
CREATE TABLE table_name(
column_name1 DATATYPE CONSTRAINT,
column_name2 DATATYPE CONSTRAINT,
column_name3 DATATYPE CONSTRAINT
);

# Eg
USE collage;
CREATE TABLE student(id INT PRIMARY KEY, name VARCHAR(50), age INT NOT NULL );

# INSERT DATA INTO TABLE
INSERT INTO table_name VALUES (column_name1_val, column_name2_val, column_name3_val);

# Eg
INSERT INTO student VALUEs (1, "Jayad", 23);

# Eg : INSERT MULTIPLE RECORDS 
INSERT INTO employee_info VALUES (4,"John",24), (5,"Robert",24);

# DISPLAY ALL DATABASES
SHOW DATABASES;

# DISPLAY ALL TABLES IN USE DATABASE
SHOW TABLES;

# FETCH ALL DATA INSIDE TABLE
SELECT * FROM table_name;

# EXAMPLE OF collage DATABASE and student TABLE
CREATE DATABASE collage;

USE collage;

CREATE TABLE student(
rollno INT PRIMARY KEY,
name VARCHAR(50),
marks INT NOT NULL,
grade VARCHAR(1),
city VARCHAR(20)
);

INSERT INTO student VALUES 
(101, 'Anil', 78, 'C', 'Pune'),
(102, 'Bhumika', 93, 'A', 'Mumbai'),
(103, 'Chetan', 85, 'B', 'Mumbai'),
(104, 'Dhruv', 96, 'A', 'Delhi'),
(105, 'Jayad', 95, 'A', 'Rui');

SELECT * FROM student;

#SELECT SPECIFIC COLUMN FROM TABLE
SELECT column_name1, column_name2 FROM table_name

#SELECT Different column_named data from column_name  FROM table
SELECT DISTINCT column_name FROM table_name;

#Eg
SELECT DISTINCT city FROM student;

#WHERE CLAUSE : FETCH CONDITION SPECIFIC DATA
SELECT column_name FROM table_name WHERE column_name >= 18;

# Eg
SELECT name FROM student WHERE age >= 18;

# AND : BIND MULTIPLE CONDITON : ALL CONDITION WILL BE TRUE 
SELECT column_name FROM table_name WHERE colunm_name1 = 'Mumbai' AND column_name2 > 18;

# OR : ANY ONE CONDITION CAN BE TRUE
SELECT column_name FROM table_name WHERE column_name1 = 'Mumbai' OR column_name2 > 18;

# Eg
SELECT name FROM student WHERE city = 'Mumbai' OR age > 18;

# BETWEEN : SELECT FROM RANGE
SELECT * FROM table_name WHERE column_name BETWEEN 70 AND 90;

# Eg
SELECT * FROM student WHERE marks BETWEEN 70 AND 90;

#IN : CLAUSE MATCH DATA IN LIST WITH CONDITON
SELECT * FROM table_name WHERE column_name IN ('condition1','condition2','condition3');

# Eg
SELECT * FROM student WHERE city IN ('Mumbai','Pune','Faridabad');

# NOT : CLAUSE USE FOR NEGATION : CHECK OPPOSITE CONDTION 
SELECT * FROM table_name WHERE column_name NOT IN ('conditon1','conditon2','conditon3');

# Eg
SELECT * FROM student WHERE city NOT IN ('Mumbai','Delhi','Pune');

# LIMIT : CLAUSE USE FOR CHECK ONLY FIRST LIMIT RECORDS
SELECT * FROM table_name LIMIT limit_number

# Eg
SELECT * FROM student LIMIT 5

SELECT * FROM student WHERE city = "Mumbai" LIMIT 5

# ORDER BY : ARRANGE COLUMN DATA IN ASCENDING OR DESCENDING ORDER [ASC | DESC]
SELECT * FROM table_name ORDER BY CITY DESC;

# Eg
SELECT * FROM student ORDER BY DESC LIMIT 3;

# AGGREGATE FUNTION : COUNT(), MAX(), MIN(), SUM(), AVG() USE WITH SELECT CLAUSE 

# Eg
SELECT COUNT(marks) FROM student;
SELECT MAX(marks) FROM student;
SELECT MIN(marks) FROM student;
SELECT SUM(marks) FROM student;
SELECT AVG(marks) FROM student;

# GROUP BY : GROUP BY SPECIFIC ROWS : USE WITH AGGRIGATE FUNCTION 
SELECT column_name FROM table_name GROUP BY column_name;

# Eg : GROUP BY TWO COLUMN NAMES city, makrs
SELECT city , AVG(marks) FROM student GROUP BY city, marks ORDER BY city DESC;

# Eg : FIND TOTAL PAYMENT ACCORDING TO EACH PAYMENT METHOD
CREATE DATABASE customer;

USE collage;

CREATE TABLE payment(
id INT PRIMARY KEY,
name VARCHAR(50),
mode VARCHAR(20),
city VARCHAR(20)
);

INSERT INTO payment VALUES 
(1, 'Robert', 'Credit Card', 'Pune'),
(2, 'John', 'Debit Card', 'Nagar'),
(3, 'Roger', 'Net Banking', 'Nepal'),
(4, 'Tonny', 'Debit Card', 'Bhutan'),
(5, 'Cassey', 'Credit Card', 'Pune');

SELECT mode ,  COUNT(*)  FROM payment GROUP BY mode ;

# HAVING CLAUSE: APPLY CONDITION ON GROUP BY COLUMN
SELECT column_name FROM table_name GROUP BY column_name HAVING MAX(column_name) > 90;

# Eg 
SELECT city FROM student GROUP BY city HAVING MAX(marks) > 90;

# ORDER OF QUERY
SELECT city , name 
FROM payment 
WHERE mode = 'Credit Card'
GROUP BY city , name
HAVING city = 'Pune'
ORDER BY city DESC;


# SQL SAFE UPDATE : ERROR OCCUR WHEN UPDATE TO OFF BY DEFAULT IT ON 
SET SQL_SAFE_UPDATES = 0;

# UPDATE : UPDATE DATA IN TABLE
UPDATE table_name SET column_name = conditon WHERE column_name = condition;

# Eg
UPDATE payment SET mode = 'Net Banking' WHERE mode = 'UPI Transaction';

# DELETE : REMOVE DATA IN TABLES
DELETE FROM table_name WHERE column_name = conditon;

# Eg
DELETE FROM payment WHERE payment_id = 100339393499;

# FOREIGN KEY : LINK DATA BETWEEN TWO TABLES
CREATE TABLE dept(
    id INT PRIMARY KEY,
    name VARCHAR(20)
);

CREATE TABLE teacher(
    id INT PRIMARY KEY,
    name VARCHAR(20),
    dept_id INT,
    FOREIGN KEY (dept_id) REFERNCES detp(id)
)

# ON CASCADE UPDATE : APPLY ON FOREIGN KEY ONCE CHANGE IN TABLE REFLECT ALL TABLE 
# ON CASCADE DELETE : APPLY ON FOREIGN KEY ONCE CHANGE IN TABLE REFLECT ALL TABLE 

CREATE TABLE dept(
id INT PRIMARY KEY,
name VARCHAR(30)
);

INSERT INTO dept VALUES
(101, 'IT'),
(102, 'COMMERCE');

CREATE TABLE teacher (
id INT PRIMARY KEY,
name VARCHAR(20),
dept_id INT,
FOREIGN KEY (dept_id) REFERENCES dept(id)
-- ON UPDATE CASCADE : ON DELETE CASCADE
ON UPDATE CASCADE
ON DELETE CASCADE
);

INSERT INTO teacher VALUES 
(101, 'Jack',101),
(102, 'Robin', 102);

SELECT * FROM dept;
SELECT * FROM teacher;

UPDATE dept SET id = 120 WHERE id = 102;

SELECT * FROM dept;
SELECT * FROM teacher;

# ALTER : CHANGE IN COLUMNS 
ALTER TABLE table_name ADD COLUMN column_name DATATYPE CONSTRAINT;

# Eg
ALTER TABLE dept ADD COLUMN age INT NOT NULL;

# ALTER : REMOVE COLUMN NAME IN TABLE USNG DROP COLUMN
ALTER TABLE table_name DROP COLUMN column_name;

# Eg
ALTER TABLE dept DROP COLUMN age;

# ALTER : RENAME TABLE NAME USING RENAME TO 
ALTER TABLE table_name RENAME TO rename_table_name;

# Eg
ALTER TABLE dept RENAME TO department;

# ALTER : CHANGE COLUMN NAME OF DATATYPE
ALTER TABLE table_name CHANGE old_column_name new_column_name new_DATATYPE new_CONSTRAINT;

# Eg
ALTER TABLE dept CHANGE name dept_name VARCHAR(20);

# ALTER : TO MODIFY THE DATATYPE OR CONSTRAINT OF ALREADY EXISTS COLOUMN NAME
ALTER TABLE table_name MODIFY column_name NEW_DATATYPE NEW_CONSTRAINT;

# Eg
ALTER TABLE table_name MODIFY id INT PRIMARY KEY AUTO INCREMENT;